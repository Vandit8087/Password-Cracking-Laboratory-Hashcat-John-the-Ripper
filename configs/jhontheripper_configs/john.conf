# John the Ripper Configuration for Password Cracking Laboratory
# Educational configuration file for learning password security concepts

[Options]
# Basic options
Wordlist = /usr/share/wordlists/rockyou.txt
Hashfile = hashes.txt
# Incremental mode settings  
DefaultIncrement = ASCII
IncrementMinLength = 1
IncrementMaxLength = 12

# Performance tuning
FormatDisabled = dynamic
WordlistMemoryMap = Y
WordlistLoopback = N

# Session and logging
SessionFileType = 2
LogLevel = 3
StatusShowCandidates = Y

[List.Generic:Digits]
0123456789

[List.Generic:LowerCase] 
abcdefghijklmnopqrstuvwxyz

[List.Generic:UpperCase]
ABCDEFGHIJKLMNOPQRSTUVWXYZ

[List.Generic:LowerNum]
abcdefghijklmnopqrstuvwxyz0123456789

[List.Generic:UpperNum]
ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

[List.Generic:Alpha]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ

[List.Generic:Alnum]
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

[List.Generic:ASCII]
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

[List.External:Filter_Alpha]
// External filter to allow only alphabetic characters
void filter()
{
    int i;
    i = 0;
    while (word[i])
        if (word[i] < 'A' || (word[i] > 'Z' && word[i] < 'a') || word[i] > 'z')
            word[0] = 0;
        else
            i++;
}

[List.External:Filter_Digits]  
// External filter to allow only digits
void filter()
{
    int i;
    i = 0;
    while (word[i])
        if (word[i] < '0' || word[i] > '9')
            word[0] = 0;
        else
            i++;
}

[List.External:Filter_Alnum]
// External filter to allow only alphanumeric characters  
void filter()
{
    int i;
    i = 0;
    while (word[i]) {
        if (!((word[i] >= 'A' && word[i] <= 'Z') ||
              (word[i] >= 'a' && word[i] <= 'z') ||
              (word[i] >= '0' && word[i] <= '9'))) {
            word[0] = 0;
            break;
        }
        i++;
    }
}

[List.External:Double]
// Double each word (e.g., "test" becomes "testtest")
void filter()
{
    int i, j;
    static int initialized = 0;
    static char doubled[256];
    
    if (!initialized) {
        initialized = 1;
    }
    
    i = 0;
    while (word[i] && i < 127) {
        doubled[i] = word[i];
        doubled[i + 128] = word[i];
        i++;
    }
    
    doubled[i * 2] = 0;
    strcpy(word, doubled);
}

[List.External:Reverse]
// Reverse each word
void filter()
{
    int i, len;
    char temp;
    
    len = strlen(word);
    for (i = 0; i < len / 2; i++) {
        temp = word[i];
        word[i] = word[len - 1 - i];  
        word[len - 1 - i] = temp;
    }
}

[List.Rules:Educational]
# Educational rules for learning password patterns
:
# No change (test original word)
c
# Capitalize first letter
u
# Convert to uppercase
l  
# Convert to lowercase
-c
# Uncapitalize (lowercase first letter)
C
# Invert case

# Single character append
$1
$2
$3
$!
$@
$#
$$
$%

# Single character prepend  
^1
^2
^3
^!
^@

# Simple substitutions (leet speak)
sa@
# Substitute 'a' with '@'
se3
# Substitute 'e' with '3'  
si1
# Substitute 'i' with '1'
so0
# Substitute 'o' with '0'
ss$
# Substitute 's' with '$'
st7
# Substitute 't' with '7'

# Common number sequences
$1$2$3
# Append "123"
$3$2$1
# Append "321"
^1^2^3
# Prepend "123"

# Year patterns
$2$0$2$3
# Append "2023"
$2$0$2$4
# Append "2024"
$2$0$2$5
# Append "2025"

[List.Rules:Corporate]
# Corporate environment focused rules
:
c
u
l

# Corporate suffixes
$c$o$r$p
# Append "corp"
$i$n$c
# Append "inc"  
$l$t$d
# Append "ltd"
$c$o$m
# Append "com"

# Admin/User patterns
$a$d$m$i$n
# Append "admin"
$u$s$e$r
# Append "user"
$t$e$s$t
# Append "test"

# Year combinations with corporate
c$2$0$2$3
# Capitalize + "2023"
c$!$2$0$2$3
# Capitalize + "!2023"

# Leet + corporate
csa@$2$0$2$3
# Capitalize + a->@ + "2023"
cse3$!
# Capitalize + e->3 + "!"

[List.Rules:Advanced]
# Advanced rule set for comprehensive testing
:
c
u
l
C
r
-c

# Multiple substitutions
sa@se3
# a->@ and e->3
sa@se3si1
# a->@, e->3, i->1
sa@se3si1so0
# Full leet speak
sa4se3si1so0st7
# Extended leet speak

# Complex append patterns
$1$2$3$!
# "123!"
$!$@$#
# "!@#"
$2$0$2$3$!
# "2023!"

# Combinations
csa@$1$2$3
# Capitalize + a->@ + "123"
usa@se3$!
# Uppercase + leet + "!"
cse3si1$2$0$2$3
# Capitalize + leet + year

# Deletion patterns
-c:]
# Remove case, delete last char
-c:D1
# Remove case, delete first char

# Position-specific operations  
T1T3T5
# Toggle case at positions 1,3,5
*12
# Duplicate word positions 1-2

# Seasonal patterns  
$s$p$r$i$n$g
# "spring"
$s$u$m$m$e$r
# "summer"
$w$i$n$t$e$r
# "winter"
$f$a$l$l
# "fall"

[List.Rules:Targeted]
# Rules for targeted attacks based on intelligence
:
c

# Company specific (example: Delta)
$d$e$l$t$a
# Append "delta"
$D$e$l$t$a
# Append "Delta" 
$D$E$L$T$A
# Append "DELTA"

# Security industry terms
$s$e$c$u$r$e
# "secure"
$p$a$s$s$w$o$r$d
# "password"
$s$e$c$r$e$t
# "secret"
$a$c$c$e$s$s
# "access"

# Geographic patterns (customize based on target)
$N$Y$C
# "NYC"
$U$S$A
# "USA"

# Keyboard patterns
$q$w$e$r$t$y
# "qwerty"
$a$s$d$f
# "asdf"
$1$2$3$q$w$e
# "123qwe"

[List.Rules:Hybrid]
# Hybrid rules combining multiple techniques
:
c
u
l

# Leet + numbers
sa@se3$1$2$3
# Leet + "123"
sa@se3si1so0$2$0$2$3
# Full leet + year

# Case + substitution + append
csa@$!
# Capitalize + a->@ + "!"
use3$1$2$3
# Uppercase + e->3 + "123"

# Complex transformations
csa@se3si1$!$@$#
# Capitalize + leet + specials
usa@se3si1so0$2$0$2$3$!
# Uppercase + full leet + year + special

# Reverse combinations
rcsa@$1$2$3
# Reverse + capitalize + leet + numbers
ruse3si1$!$!
# Reverse + uppercase + leet + specials

[List.Rules:Minimal]
# Minimal rule set for quick testing
:
c
u
l
$1
$!
sa@
se3
$1$2$3
$!$!$!
csa@$1
use3$!

[List.Rules:Debug]
# Debug rules for testing rule functionality
:
# Identity rule for baseline
d
# Duplicate word
r  
# Reverse word
c$T$E$S$T
# Capitalize + "TEST"
$D$E$B$U$G
# Append "DEBUG"